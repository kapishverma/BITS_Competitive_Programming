The very first solution that comes to our mind is the one that we learned in school. If the sum 
of digits in a number is a multiple of 3 then the number is a multiple of 3, e.g., for 612, the 
sum of digits is 9 so it’s a multiple of 3. But this solution is not efficient. You have to get 
all decimal digits one by one, add them and then check if the sum is a multiple of 3.
__________________________________________________________________________________________________
There is a pattern in the binary representation of a number that can be used to find if a number
is a multiple of 3. If the difference between the count of odd set bits (Bits set at odd positions)
and even set bits is a multiple of 3 then is the number.

Example: 23 (00..10111) 
1) Get count of all set bits at odd positions (For 23 it’s 3). 
2) Get count of all set bits at even positions (For 23 it’s 1). 
3) If the difference between the above two counts is a multiple of 3 then the number is also a multiple of 3. 
(For 23 it’s 2 so 23, is not a multiple of 3)
Take some more examples like 21, 15, etc…
_______________________________________________________________________________________________________
Proof: 

Let the binary representation of the number be: abcde.
In decimal form this number will be:  2^{4} * a  +  2^{3} * b  +  2^{2} * c  +  2^{1} * d  +  2^{0} * e

Every even power of 2 can be represented as 3n + 1, and every odd power of 2 can be represented as 3n – 1. For example:

2^{0} = 3 * 0 + 1
2^{1} = 3 * 1 - 1
2^{2} = 3 * 1 + 1
2^{3} = 3 * 3 - 1
ans so on...

Therefore, the decimal form becomes: 
(3n+1) * a  +  (3n-1) * b  +  (3n+1) * c  +  (3n-1) * d  +  (3n+1) * e 
[Tex](3n)(a+b+c+d+e) + (a - b + c - d + e) \\[/Tex](multiple of 3)+ (a + c + e) - (b + d)
__________________________________________________________________________________
class Solution {
    int isDivisible(String s) {
      int n=s.length();

     int odd=0;
     int even=0;

     for(int i=0;i<n;i++){
         if(s.charAt(i)=='1' && i%2==0){
             even++;
         }
         else if(s.charAt(i)=='1' && i%2!=0){
             odd++;
         }
     }
     int ans=Math.abs(even-odd);
     
     return ans%3==0?1:0;   
    }
}
